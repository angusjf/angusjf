{"is404":false,"staticData":{"1513671225":"[\"content/blog/js-spread-operator.md\"]","2200473815":"{\"parsedFrontmatter\":{\"title\":\"On the Embarrassingly Poor Performance of JavaScript's Spread Operator\",\"img_url\":\"images/none\",\"img_alt\":\"No alt\",\"date\":\"2022-08-05\",\"seo_description\":\"On the Embarrassingly Poor Performance of JavaScript's Spread Operator\",\"summary\":\"On the Embarrassingly Poor Performance of JavaScript's Spread Operator\",\"tags\":[\"javascript\",\"typescript\",\"performance\"],\"hidden\":true},\"withoutFrontmatter\":\"# On the Embarrassingly Poor Performance of JavaScript's Spread Operator\\n\\nHere is an example of immutable TypeScript code which is so inefficient it caused the lambda it was running on to time out.\\n\\nSay we have a list of connections between airports:\\n```ts\\nconst links = [ ['Heathrow', 'Paris'], ['Berlin', 'Brussels'] /* ... */ ];\\n```\\n\\nAnd we want to format this data as a \\\"dictionary\\\", from airport to it's potential destinations:\\n```ts\\n{\\n    Heathrow: ['Paris', 'Berlin', 'Brussels'],\\n    Gatwick: [ /* ... */ ]\\n}\\n```\\n\\nIf we are strictly using immutable javascript, we end up with this:\\n\\n```ts\\nconst validDestinations = (links) =>\\n    links.reduce(\\n        (acc, [from, to]) =>\\n            ({ ...acc,\\n               [from]: [ ...(acc[from] ?? []), to ]\\n             }),\\n        {}\\n    )\\n```\\n\\n_(I know the number of symbols in the above snippet will make any reader born before the year 2000 feel unwell & apologise in retrospect)_\\n\\nThe nested spread operator gives this code **cubic time complexity** and will generate an insane amount of \\\"garbage\\\" intermediate arrays.\\n\\nThis isn't some pedantic performance point, it's the difference between working code and timing out!\\n\"}"},"path":"js-spread-operator"}